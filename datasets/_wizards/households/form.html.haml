- carriers = %w[coal crude_oil natural_gas biomass solar_thermal electricity steam_hot_water notdefined]

%h3{style:"color: #00c; border-bottom: 3px solid #00c"} Final Demands
%br
%table.condensed-table.bordered-table
  %thead
    -# Defines the header row
    %tr
      -# Table row
      %th Input
      -# Table cell for headers
      - carriers.each do |carrier|
        %th= carrier
  %tbody
    -# defines main part of table
    %tr
      %th households
      -# no indent because households in on same line (shortcut), header cell because you want it fat formatted
      - carriers.each do |carrier|
        %td= number_field(carrier, :demand_total)
        -# normal cell. Access with: get(:households,:coal,:demand_total) : --> ''  , means a text string
    
    %tr
      %th{:colspan => 9, :style => "background: #eee"}

        %strong application split
    
    %tr
      %th space heating
      - carriers[0...-1].each do |carrier|
        %td= number_field(carrier, :split, :useable_heat)
        -# :split maybe: :inputsplit etc. it's a free name'
      %td 
    %tr
      %th hot water
      - carriers[0...-1].each do |carrier|
        %td= number_field(carrier, :split, :hot_water)
      %td 
    
    %tr
      %th cooking
      %td 
      %td 
      %td= number_field(:natural_gas, :split, :cooking)
      %td= number_field(:biomass, :split, :cooking)
      %td 
      %td= number_field(:electricity, :split, :cooking)
      %td 
      %td 
    
    %tr
      %th lighting
      %td 
      %td 
      %td 
      %td 
      %td 
      %td= number_field(:electricity, :split, :lighting)
      %td 
      %td 
    
    %tr
      %th cooling
      %td 
      %td 
      %td= number_field(:natural_gas, :split, :cooling)
      %td 
      %td 
      %td= number_field(:electricity, :split, :cooling)
      %td 
      %td 
    
    %tr
      %th appliances
      %td 
      %td 
      %td 
      %td 
      %td 
      %td
        = number_field(:electricity, :split, :appliances)
        -# bla
      %td 
      %td 

%ul.tabs{'data-tabs' => 'tabs'}
  -# Make the tabs. Think of indentation as boxes
  - Etsource::Constants::HOUSEHOLDS.each do |section_carrier, carrier_converters|
    -# section carrier: useable_heat OR hot_water, carrier_converters: key, value pairs e.g.: :coal => %w[coal_boiler_households_energetic],
    %li{:class => section_carrier == :useable_heat ? 'active' : nil}= link_to section_carrier.to_s, "##{section_carrier}"

#tab-content.tab-content{'data-tabs' => 'tabs'}
  - Etsource::Constants::HOUSEHOLDS.each do |section_carrier, carrier_converters|
    -# https://github.com/dennisschoenmakers/etengine/blob/edge/app/models/etsource/constants.rb
    %div.tab-pane{:id => section_carrier.to_s, :class => section_carrier == :useable_heat ? 'active' : nil}
      %p== Split for #{section_carrier} technologies
      
      %table.condensed-table
        %thead
          %tr
            %th Name
            %th Split
            %th.debug Exp. demand
            %th.debug Output Share
            -# 
              %th.debug i
              %th.debug j
              %th.debug k
              %th.debug l
              %th.debug m

            %th.debug Debug
        %tbody
          - carrier_converters.each do |carrier, converters| 
            -# carrier, converters <-- coal, coal_boiler_households
            -# =======================================Till here ================
            %tr
              %th{:colspan => 5, :style => "background: #eee"}
                = carrier
              
            - converters.each do |converter|
              %tr
                %th
                  %label{:style => 'text-align:left'}
                    = link_to converter.gsub('_households_energetic', ''), data_converter_path(:api_scenario_id => 'latest', :id => converter), :target => :_blank
                    -# Write name of converter as link
                - if converters.length == 1
                  %th= number_field(carrier, section_carrier, converter.to_sym, :disabled => true, :value => 100.0)
                  -# What is 'converter.to_sym'?
                - else
                  %th= number_field(carrier, section_carrier, converter.to_sym)
                
                %td.debug
                  %label{:style => 'text-align:left'}= (@gql.query("present:V(#{converter};demand_expected_value)") / BILLIONS).round(3) rescue -1.0
                - object_dataset = @gql.present_graph.converter(converter).object_dataset
                -# Do you calculate the demand expected value here, or do you display the value from the graph?
                %td.debug
                  %label= object_dataset[:output_share].round(3) rescue -1.0
                -#
                  %td.debug
                    %label= object_dataset[:cell_i]
                  %td.debug
                    %label= object_dataset[:cell_j]
                  %td.debug
                    %label= object_dataset[:cell_k]
                  %td.debug
                    %label= object_dataset[:cell_l]
                  %td.debug
                    %label= object_dataset[:cell_m]
                

                %td.debug
                  -# to display debug button?x
                  %a.btn{:data => {:'controls-modal' => "debug_#{converter}", :backdrop => "true"}} Debug
                  %div.modal.hide{:id => "debug_#{converter}"}
                    .modal-header
                      %a.close{:href => "#"} &times;
                      %h3 Debug 
                    .modal-body
                      - InputTool::SavedWizard.all.inject({}) {|hsh,f| hsh.merge f.code => f.research_data_bucket}.each do |k,h|
                        %code= @gql.present_graph.converter(converter.to_sym).object_dataset.inspect

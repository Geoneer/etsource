- carriers = %w[coal crude_oil network_gas biomass solar_thermal electricity steam_hot_water not_defined]
- @present = @gql.present_graph

%h3{style:"color: #00c; border-bottom: 3px solid #00c"} Final energy consumption and application split
%br
%table.condensed-table.bordered-table
  %thead
    -# Defines the header row
    %tr
      -# Table row
      %th
      -# Table cell for headers
      - carriers.each do |carrier|
        %th= carrier
  %tbody
    -# defines main part of table

    %tr
      %th{:colspan => 9, :style => "background: #eee"}
        %strong Final energy consumption (PJ)

    %tr
      %th households
      -# no indent because households in on same line (shortcut), header cell because you want it fat formatted
      - carriers.each do |carrier|
        %td= number_field(carrier, :demand_total)
        -# normal cell. Access with: get(:households,:coal,:demand_total) : --> ''  , means a text string
    
    %tr
      %th{:colspan => 9, :style => "background: #eee"}

        %strong Application split (%)
        -# Future feature: changes tabbing order in this specific part of the table to: top-to-bottom then left-to-right
    
    %tr
      %th space heating
      - carriers[0...-1].each do |carrier|
        %td= number_field(carrier, :split, :useable_heat)
        -# :split maybe: :inputsplit etc. it's a free name'
      %td 
    %tr
      %th hot water
      - carriers[0...-1].each do |carrier|
        %td= number_field(carrier, :split, :hot_water)
      %td 
    
    %tr
      %th cooking
      %td 
      %td 
      %td= number_field(:natural_gas, :split, :cooking)
      %td= number_field(:biomass, :split, :cooking)
      %td 
      %td= number_field(:electricity, :split, :cooking)
      %td 
      %td 
    
    %tr
      %th lighting
      %td 
      %td 
      %td 
      %td 
      %td 
      %td= number_field(:electricity, :split, :lighting)
      %td 
      %td 
    
    %tr
      %th cooling
      %td 
      %td 
      %td= number_field(:natural_gas, :split, :cooling)
      %td 
      %td 
      %td= number_field(:electricity, :split, :cooling)
      %td 
      %td 
    
    %tr
      %th appliances
      %td 
      %td 
      %td 
      %td 
      %td 
      %td
        = number_field(:electricity, :split, :appliances)
        -# bla
      %td 
      %td 

%h3{style:"color: #00c; border-bottom: 3px solid #00c"} Technology splits
%br

%ul.tabs{'data-tabs' => 'tabs'}
  -# Make the tabs. Think of indentation as boxes
  - wizard_config[:households].each do |application_carrier, carrier_converters|
    -# section carrier: useable_heat OR hot_water, carrier_converters: key, value pairs e.g.: :coal => %w[coal_boiler_households_energetic],
    %li{:class => application_carrier == :useable_heat ? 'active' : nil}= link_to application_carrier.to_s, "##{application_carrier}"

#tab-content.tab-content{'data-tabs' => 'tabs'}
  - wizard_config[:households].each do |application_carrier, carrier_converters|
    %div.tab-pane{:id => application_carrier.to_s, :class => application_carrier == :useable_heat ? 'active' : nil}
      %p== Split for #{application_carrier} technologies
      
      %table.condensed-table
        %thead
          %tr
            %th Name
            %th Split
            %th.debug Exp. demand (PJ)
            %th.debug Output Share (%)
            %th.debug Details
        
        %tbody
          - carrier_converters.each do |carrier, converter_keys| # <-- coal, coal_boiler_households
            %tr
              %th{:colspan => 5, :style => "background: #eee"}= carrier
              
            - converter_keys.each do |converter_key|
              -# converter_key is simply the 
              - converter = @present.converter(converter_key)
              %tr
                %th
                  %label{:style => 'text-align:left'}
                    = link_to converter.key, data_converter_path(:api_scenario_id => 'latest', :id => converter_key), :target => :_blank
                    -# Write name of converter as link
                
                -# -------------------------------------------------- Text fields -----------------
                
                - if converter_keys.length == 1
                  %th= number_field(carrier, application_carrier, converter_key.to_sym, :disabled => true, :value => 100.0)
                  -# converter_key.to_sym turns a string into a symbol (quicker calculation)
                - else
                  %th= number_field(carrier, application_carrier, converter_key.to_sym, type: 'text' )
                
                -# -------------------------------------------------- Demand expected -------------
                %td.debug
                  %label{style: 'text-align:left'}= (converter.dataset_get(:demand_expected_value) / BILLIONS).round(3) rescue 'error'
                
                -# -------------------------------------------------- Output Share ----------------
                %td.debug
                  -# Display the value from the graph that is calculated after 'save' button is clicked
                  %label
                    = converter.dataset_get(:debug_output_share).andand.round(3) #rescue 'n/a'
                
                -# -------------------------------------------------- Details popup ---------------

                %td.debug
                  %a.btn{data: {:'controls-modal' => "debug_#{converter_key}", :backdrop => "true"}} Details
                  %div.modal.hide{:id => "debug_#{converter_key}"}
                    .modal-header
                      %a.close{:href => "#"} &times;
                      %h3 Details 
                    .modal-body
                      - InputTool::SavedWizard.all.inject({}) {|hsh,f| hsh.merge f.code => f.research_data_bucket}.each do |k,h|
                        %code= converter.object_dataset.inspect

          -# -------------------------------------------------------- AMBIENT HEAT ----------------

          - if wizard_config[:ambient_heat][application_carrier]
            - values = []
            %tr
              %th{:colspan => 5, :style => "background: #eee"} Ambient Heat

            - wizard_config[:ambient_heat][application_carrier].each do |carrier, converter_keys|
              
              - converter_keys.each do |converter_key|
                - converter = @present.converter(converter_key)
                - values << converter.dataset_get(:ambient_heat_input)

                -# -------------------------------------------------- Ambient heat per converter --

                %tr
                  %th
                    %label{style: 'text-align:left'}= converter.key
                  %th= converter.dataset_get(:ambient_heat_input).inspect

            -# ------------------------------------------------------ Ambient heat total ----------

            %tr
              %th 
                %label Total
              %th= values.compact.sum

          -# -------------------------------------------------------- Total -----------------------
          
          %tr
            %th{:colspan => 5, :style => "background: #eee"} Total 

          %tr
            - converter = @present.converter(wizard_config[:application_parents][application_carrier])
            %th
              %label= converter.key
            %th
              %label{style: 'text-align:left'}= converter.dataset_get(:demand_expected_value)



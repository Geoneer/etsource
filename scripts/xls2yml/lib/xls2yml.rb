require_relative 'trollop'
require_relative 'processor'
require_relative 'excel_export'
require_relative 'excel_area_export'
require_relative 'csv'
require_relative 'converter_exporter'
require 'zip/zip'

class Xls2yml
  def initialize
    setup_cli
    parse_args
    run
    clean_up
  end

  def setup_cli
    opts = Trollop::options do
      version 'xls2yml 0.0.1'
      banner <<-EOS

XLS2YML
=======

This script converts the csv files generated by excel to a set of yml files
to be used by etsource.

  Usage:

  xls2etsource.rb <source> [output_directory]

Source can be a zip file or an existing directory.
If the output_directory parameter is missing then the script will write files
to the local output directory. The script *will overwrite* the files in the
destination directory.

      EOS
    end
  end

  def parse_args
    Trollop::die "Please set the source directory or a zip file" if ARGV.size < 1

    @source = ARGV[0]
    @dest   = ARGV[1]

    unless File.directory?(@source)
      @zip_root = expand_zip(@source)
      # The zip file usually contains a subfolder, let's return that
      @source = Dir.glob("#{@zip_root}/*/")[0]
    end
    FileUtils.mkdir_p(@dest) unless File.directory?(@dest)
  end

  def run
    ETE::Processor.new(:source => @source, :dest => @dest).export_all
  end

  # Returns the expanded files directory root
  #
  def expand_zip(zipfile)
    destination = "tmp_#{Time.new.to_i}"
    Zip::ZipFile.open(zipfile) do |zip|
      zip.each do |f|
        path = File.join(destination, f.name)
        FileUtils.mkdir_p(File.dirname(path))
        zip.extract(f, path) unless File.exist?(path)
      end
    end
    destination
  rescue
    puts "Error uncompressing the zip file"
    FileUtils.rm_rf(destination)
    exit
  end

  def clean_up
    FileUtils.rm_rf @zip_root if @zip_root
  end
end

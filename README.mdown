Folder structure
================

models
------

The model folders contains other models. Mostly for illustration, documentation and testing purposes. These models can be run and tested using the etengine command line interface. For instance, models/minimal contains the minimal set of files and content for a simple two-converter graph. To illustrate the behaviour of flex-max links see the models/flex_max folder.

gqueries
---------
Gqueries nested within folders. The folders names are concatenated and become the group of a gquery. E.g. The gquery co2 defined in: /gqueries/foo/bar/co2.yml will be assigned to the gquery_group 'foo_bar'.

tests
-----

Every file in tests consists of a scenario definition (country, year, preset_scenario, uservalues, etc) and expected present and/or future results thereof. 

Create a new file into tests/descriptive_name.yml

    --- 
    settings: 
      country: nl
      scenario_id: ID

Generate or update: 

    (etengine)$ rake etsource:update_tests

Run: 

    (etengine)$ rspec spec/etsource


scripts
--------
The folder 'scripts' contains the scripts used to alter the names and contents of the queries.
The folder 'change_reports' within 'scripts' contains the changes made in the queries, one for each of the query groups.

Rules and best practices
------------------------
Try to make one commit for each batch of changes you make to the files, related to one issue.
For example, if a query is changed, try to alter all queries and inputs related to the query in a single commit.

# Etsource update guide

Uploading Zip files. You have to copy the zip file to the etsource directory and enter the following command in your terminal:

    $ cd your-etsource-directory
    $ ruby scripts/xls2yml/xls2yml.rb

If you changed anything converter keys, naming, structure, in general to the topology, you have to export all countries. If you only update a country dataset with new numbers, you don't have to update all countries.

After this you can commit your changes. 

Adding or updating carriers, you have to do in etsource/datasets/.../carriers.yml. 


# ETsource Form Wizards from the Bottom up

## Glossary

_virtual_: things that are not stored in this github project are called virtual. 

## A) Data Bucket

Is a collection of (nested) key-value pairs. It is either stored in a file and commited to Github, or it is a virtual one, such as the ones generated by the _form wizard_, and just exists while loading the Etsource. 

### Key Value Pair

_Key_ is the name of the attribute and value the actual value. The value can be a number, boolean, text, date. Inside a _transformer definition_ (_dataset wizard_) the value can be also a dynamic, calculated one. 

    :co2_price: 0.125
    :co2_price: <%= 5.0 * 1.25 / 1_000_000 %>

The key will sometimes be written with or without trailing ":". This is the case in data buckets for topology elements.

### Nested Key Value Pairs

To separate key value pairs we can nest them, and create a folder structure.

    :carriers:
      :electricity:
        :infinite: false

General guidelines is that the top-level "folder" contains sections for every type of graph element and are called _namespaces_.

    :carriers:
    :area:
      :area_data:

Exceptions are the elements defined in the _topology_, they have an implicit nesting, based on how they _key_ looks like. 

We can also write a nested key value pair in one line, now this can be found for slot and link key-value pairs:
    
    households_useful_demand_hot_water-(hot_water): {conversion: 1.0}

### Namespaces (aka Folders)

A namespace is a fancy name for a folder. The contents of a folder will be put within a key of the folder name

    # datasets/nl/carriers/sustainable_carriers.yml:

    biomass: {co2_free: 1.0}

Will be nested within the carriers key (carriers derived from the folder name 'carriers')

    carriers:
      biomass: {co2_free: 1.0}

## B) Datasets

A dataset is the collection of all _data buckets_ within a _section_. Look at it as one big _data bucket_. A dataset is virtual, and not commited to Github. The merging of all buckets happens during runtime. There are three independent levels: default, country and wizard datasets. Each can overwrite values of the former. 

### Default Dataset (datasets/_defaults)

Contains all the values that are a) the same for every country or b) should be treated as default/start values. Values here are overwritten in the country dataset. That means we can put the data that sometimes changes in a _default dataset_ and overwrite it in the _country dataset_ when it does actually change.

### Country Dataset (datasets/:area_code)

The precise name would be area(-specific) dataset (area can be a country 'nl', or a region 'nl-drenthe'). But country dataset is a clear enough and human-friendly name and is easy on the lips.

### Wizard Dataset

Is the dataset generated by a dataset wizard transformer (see that section for details).

### Graph Dataset

The Graph dataset merges the default, country, wizard dataset together to the final dataset. It contains everything that is needed for a country (including time series, fce_values, area data).

### Qernel Dataset (internal)

Compiled dataset and readable by the Qernel. The qernel dataset looks slightly different due to legacy reasons. Main differences are that topology keys are hashed for performance reasons. 

### Overwriting Rules

    # _defaults/area.yml
    ...
    :area_data:
      :co2_price: 0.002
      :has_fce: false

    # nl/area.yml
    ...
    :area_data:
      :number_of_households: 100_000
      :has_fce: true

    # => {:area_data: {:co2_price: 0.002, :number_of_households: 100_000, :has_fce: true }}


### config.yml

Contains variables and constants that are shared in both transformer.yml and form.html.haml. The contents of config.yml can be accessed using wizard_config[...]. 





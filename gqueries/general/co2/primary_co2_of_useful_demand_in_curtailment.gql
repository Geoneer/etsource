# CO2 of carrier group 'useful_demand' in curtailment converter

- unit = tonne
- query =
    SUM(
      V(V(energy_flexibility_curtailment_electricity).select {|node| node.input_slots.detect { |slot| slot.carrier.useable_heat? }}, "useable_heat_input_conversion * primary_co2_emission"),
      V(V(energy_flexibility_curtailment_electricity).select {|node| node.input_slots.detect { |slot| slot.carrier.cooling? }}, "cooling_input_conversion * primary_co2_emission"),
      V(V(energy_flexibility_curtailment_electricity).select {|node| node.input_slots.detect { |slot| slot.carrier.car_kms? }}, "car_kms_input_conversion * primary_co2_emission"),
      V(V(energy_flexibility_curtailment_electricity).select {|node| node.input_slots.detect { |slot| slot.carrier.truck_kms? }}, "truck_kms_input_conversion * primary_co2_emission"),
      V(V(energy_flexibility_curtailment_electricity).select {|node| node.input_slots.detect { |slot| slot.carrier.light? }}, "light_input_conversion * primary_co2_emission"),
      V(V(energy_flexibility_curtailment_electricity).select {|node| node.input_slots.detect { |slot| slot.carrier.not_defined? }}, "not_defined_input_conversion * primary_co2_emission"),
      V(V(energy_flexibility_curtailment_electricity).select {|node| node.input_slots.detect { |slot| slot.carrier.savings? }}, "savings_input_conversion * primary_co2_emission")
    ) / THOUSANDS
